(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{416:function(s,t,e){"use strict";e.r(t);var n=e(2),a=Object(n.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("ul",[e("li",[e("h1",{attrs:{id:"小记-javascript-执行机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小记-javascript-执行机制"}},[s._v("#")]),s._v(" 小记 JavaScript 执行机制")]),s._v(" "),e("p",[s._v("本文的目的就是要保证你彻底弄懂javascript的执行机制，如果读完本文还不懂，可以揍我。")]),s._v(" "),e("p",[s._v("不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。因为javascript是一门单线程语言，所以我们可以得出结论：")]),s._v(" "),e("ul",[e("li",[s._v("javascript是按照语句出现的顺序执行的")])]),s._v(" "),e("p",[s._v("看到这里读者要打人了：我难道不知道js是一行一行执行的？还用你说？稍安勿躁，正因为js是一行一行执行的，所以我们以为js都是这样的：")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("复制代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("然而实际上js是这样的：")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTimeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'定时器开始啦'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'马上执行for循环啦'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        i "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'执行then函数啦'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'代码执行结束'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("复制代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("依照"),e("strong",[s._v("js是按照语句出现的顺序执行")]),s._v("这个理念，我自信的写下输出结果：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('//"定时器开始啦"\n//"马上执行for循环啦"\n//"执行then函数啦"\n//"代码执行结束"复制代码\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("去chrome上验证下，结果完全不对，瞬间懵了，说好的一行一行执行的呢？")]),s._v(" "),e("p",[s._v("我们真的要彻底弄明白javascript的执行机制了。")]),s._v(" "),e("h3",{attrs:{id:"_1-关于javascript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-关于javascript"}},[s._v("#")]),s._v(" 1.关于javascript")]),s._v(" "),e("p",[s._v("javascript是一门"),e("strong",[s._v("单线程")]),s._v('语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的"多线程"都是用单线程模拟出来的，一切javascript多线程都是纸老虎！')]),s._v(" "),e("h3",{attrs:{id:"_2-javascript事件循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-javascript事件循环"}},[s._v("#")]),s._v(" 2.javascript事件循环")]),s._v(" "),e("p",[s._v("既然js是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理js任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类：")]),s._v(" "),e("ul",[e("li",[s._v("同步任务")]),s._v(" "),e("li",[s._v("异步任务")])]),s._v(" "),e("p",[s._v("当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fdd88994142347?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),s._v(" "),e("p",[s._v("导图要表达的内容用文字来表述的话：")]),s._v(" "),e("ul",[e("li",[s._v('同步和异步任务分别进入不同的执行"场所"，同步的进入主线程，异步的进入Event Table并注册函数。')]),s._v(" "),e("li",[s._v("当指定的事情完成时，Event Table会将这个函数移入Event Queue。")]),s._v(" "),e("li",[s._v("主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。")]),s._v(" "),e("li",[s._v("上述过程会不断重复，也就是常说的Event Loop(事件循环)。")])]),s._v(" "),e("p",[s._v("我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。")]),s._v(" "),e("p",[s._v("说了这么多文字，不如直接一段代码更直白：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let data = [];\n$.ajax({\n    url:www.javascript.com,\n    data:data,\n    success:() => {\n        console.log('发送成功!');\n    }\n})\nconsole.log('代码执行结束');复制代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("上面是一段简易的"),e("code",[s._v("ajax")]),s._v("请求代码：")]),s._v(" "),e("ul",[e("li",[s._v("ajax进入Event Table，注册回调函数"),e("code",[s._v("success")]),s._v("。")]),s._v(" "),e("li",[s._v("执行"),e("code",[s._v("console.log('代码执行结束')")]),s._v("。")]),s._v(" "),e("li",[s._v("ajax事件完成，回调函数"),e("code",[s._v("success")]),s._v("进入Event Queue。")]),s._v(" "),e("li",[s._v("主线程从Event Queue读取回调函数"),e("code",[s._v("success")]),s._v("并执行。")])]),s._v(" "),e("p",[s._v("相信通过上面的文字和代码，你已经对js的执行顺序有了初步了解。接下来我们来研究进阶话题：setTimeout。")]),s._v(" "),e("h3",{attrs:{id:"_3-又爱又恨的settimeout"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-又爱又恨的settimeout"}},[s._v("#")]),s._v(" 3.又爱又恨的setTimeout")]),s._v(" "),e("p",[s._v("大名鼎鼎的"),e("code",[s._v("setTimeout")]),s._v("无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时3秒执行：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("setTimeout(() => {\n    console.log('延时3秒');\n},3000)复制代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("渐渐的"),e("code",[s._v("setTimeout")]),s._v("用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？")]),s._v(" "),e("p",[s._v("先看一个例子：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("setTimeout(() => {\n    task();\n},3000)\nconsole.log('执行console');复制代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("根据前面我们的结论，"),e("code",[s._v("setTimeout")]),s._v("是异步的，应该先执行"),e("code",[s._v("console.log")]),s._v("这个同步任务，所以我们的结论是：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//执行console\n//task()复制代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("去验证一下，结果正确！\n然后我们修改一下前面的代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("setTimeout(() => {\n    task()\n},3000)\n\nsleep(10000000)复制代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("乍一看其实差不多嘛，但我们把这段代码在chrome执行一下，却发现控制台执行"),e("code",[s._v("task()")]),s._v("需要的时间远远超过3秒，说好的延时三秒，为啥现在需要这么长时间啊？")]),s._v(" "),e("p",[s._v("这时候我们需要重新理解"),e("code",[s._v("setTimeout")]),s._v("的定义。我们先说上述代码是怎么执行的：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("task()")]),s._v("进入Event Table并注册,计时开始。")]),s._v(" "),e("li",[s._v("执行"),e("code",[s._v("sleep")]),s._v("函数，很慢，非常慢，计时仍在继续。")]),s._v(" "),e("li",[s._v("3秒到了，计时事件"),e("code",[s._v("timeout")]),s._v("完成，"),e("code",[s._v("task()")]),s._v("进入Event Queue，但是"),e("code",[s._v("sleep")]),s._v("也太慢了吧，还没执行完，只好等着。")]),s._v(" "),e("li",[e("code",[s._v("sleep")]),s._v("终于执行完了，"),e("code",[s._v("task()")]),s._v("终于从Event Queue进入了主线程执行。")])]),s._v(" "),e("p",[s._v("上述的流程走完，我们知道"),e("code",[s._v("setTimeout")]),s._v("这个函数，是经过指定时间后，把要执行的任务(本例中为"),e("code",[s._v("task()")]),s._v(")加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。")]),s._v(" "),e("p",[s._v("我们还经常遇到"),e("code",[s._v("setTimeout(fn,0)")]),s._v("这样的代码，0秒后执行又是什么意思呢？是不是可以立即执行呢？")]),s._v(" "),e("p",[s._v("答案是不会的，"),e("code",[s._v("setTimeout(fn,0)")]),s._v("的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//代码1\nconsole.log('先执行这里');\nsetTimeout(() => {\n    console.log('执行啦')\n},0);复制代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//代码2\nconsole.log('先执行这里');\nsetTimeout(() => {\n    console.log('执行啦')\n},3000);复制代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("代码1的输出结果是：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//先执行这里\n//执行啦复制代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("代码2的输出结果是：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//先执行这里\n// ... 3s later\n// 执行啦复制代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("关于"),e("code",[s._v("setTimeout")]),s._v("要补充的是，即便主线程为空，0毫秒实际上也是达不到的。根据HTML的标准，最低是4毫秒。有兴趣的同学可以自行了解。")]),s._v(" "),e("h3",{attrs:{id:"_4-又恨又爱的setinterval"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-又恨又爱的setinterval"}},[s._v("#")]),s._v(" 4.又恨又爱的setInterval")]),s._v(" "),e("p",[s._v("上面说完了"),e("code",[s._v("setTimeout")]),s._v("，当然不能错过它的孪生兄弟"),e("code",[s._v("setInterval")]),s._v("。他俩差不多，只不过后者是循环的执行。对于执行顺序来说，"),e("code",[s._v("setInterval")]),s._v("会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。")]),s._v(" "),e("p",[s._v("唯一需要注意的一点是，对于"),e("code",[s._v("setInterval(fn,ms)")]),s._v("来说，我们已经知道不是每过"),e("code",[s._v("ms")]),s._v("秒会执行一次"),e("code",[s._v("fn")]),s._v("，而是每过"),e("code",[s._v("ms")]),s._v("秒，会有"),e("code",[s._v("fn")]),s._v("进入Event Queue。一旦"),e("strong",[s._v("setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了")]),s._v("。这句话请读者仔细品味。")]),s._v(" "),e("h3",{attrs:{id:"_5-promise与process-nexttick-callback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-promise与process-nexttick-callback"}},[s._v("#")]),s._v(" 5.Promise与process.nextTick(callback)")]),s._v(" "),e("p",[s._v("传统的定时器我们已经研究过了，接着我们探究"),e("code",[s._v("Promise")]),s._v("与"),e("code",[s._v("process.nextTick(callback)")]),s._v("的表现。")]),s._v(" "),e("p",[e("code",[s._v("Promise")]),s._v("的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的"),e("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/promise",target:"_blank",rel:"noopener noreferrer"}},[s._v("Promise"),e("OutboundLink")],1),s._v("。而"),e("code",[s._v("process.nextTick(callback)")]),s._v('类似node.js版的"setTimeout"，在事件循环的下一次循环中调用 callback 回调函数。')]),s._v(" "),e("p",[s._v("我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义：")]),s._v(" "),e("ul",[e("li",[s._v("macro-task(宏任务)：包括整体代码script，setTimeout，setInterval")]),s._v(" "),e("li",[s._v("micro-task(微任务)：Promise，process.nextTick")])]),s._v(" "),e("p",[s._v("不同类型的任务会进入对应的Event Queue，比如"),e("code",[s._v("setTimeout")]),s._v("和"),e("code",[s._v("setInterval")]),s._v("会进入相同的Event Queue。")]),s._v(" "),e("p",[s._v("事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用文章最开始的一段代码说明：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("setTimeout(function() {\n    console.log('setTimeout');\n})\n\nnew Promise(function(resolve) {\n    console.log('promise');\n}).then(function() {\n    console.log('then');\n})\n\nconsole.log('console');复制代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("ul",[e("li",[s._v("这段代码作为宏任务，进入主线程。")]),s._v(" "),e("li",[s._v("先遇到"),e("code",[s._v("setTimeout")]),s._v("，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)")]),s._v(" "),e("li",[s._v("接下来遇到了"),e("code",[s._v("Promise")]),s._v("，"),e("code",[s._v("new Promise")]),s._v("立即执行，"),e("code",[s._v("then")]),s._v("函数分发到微任务Event Queue。")]),s._v(" "),e("li",[s._v("遇到"),e("code",[s._v("console.log()")]),s._v("，立即执行。")]),s._v(" "),e("li",[s._v("好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了"),e("code",[s._v("then")]),s._v("在微任务Event Queue里面，执行。")]),s._v(" "),e("li",[s._v("ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中"),e("code",[s._v("setTimeout")]),s._v("对应的回调函数，立即执行。")]),s._v(" "),e("li",[s._v("结束。")])]),s._v(" "),e("p",[s._v("事件循环，宏任务，微任务的关系如图所示：")]),s._v(" "),e("p",[s._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),e("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1280",height:"1072"}}),s._v(")")]),s._v(" "),e("p",[s._v("我们来分析一段较复杂的代码，看看你是否真的掌握了js的执行机制：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("console.log('1');\n\nsetTimeout(function() {\n    console.log('2');\n    process.nextTick(function() {\n        console.log('3');\n    })\n    new Promise(function(resolve) {\n        console.log('4');\n        resolve();\n    }).then(function() {\n        console.log('5')\n    })\n})\nprocess.nextTick(function() {\n    console.log('6');\n})\nnew Promise(function(resolve) {\n    console.log('7');\n    resolve();\n}).then(function() {\n    console.log('8')\n})\n\nsetTimeout(function() {\n    console.log('9');\n    process.nextTick(function() {\n        console.log('10');\n    })\n    new Promise(function(resolve) {\n        console.log('11');\n        resolve();\n    }).then(function() {\n        console.log('12')\n    })\n})复制代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br")])]),e("p",[s._v("第一轮事件循环流程分析如下：")]),s._v(" "),e("ul",[e("li",[s._v("整体script作为第一个宏任务进入主线程，遇到"),e("code",[s._v("console.log")]),s._v("，输出1。")]),s._v(" "),e("li",[s._v("遇到"),e("code",[s._v("setTimeout")]),s._v("，其回调函数被分发到宏任务Event Queue中。我们暂且记为"),e("code",[s._v("setTimeout1")]),s._v("。")]),s._v(" "),e("li",[s._v("遇到"),e("code",[s._v("process.nextTick()")]),s._v("，其回调函数被分发到微任务Event Queue中。我们记为"),e("code",[s._v("process1")]),s._v("。")]),s._v(" "),e("li",[s._v("遇到"),e("code",[s._v("Promise")]),s._v("，"),e("code",[s._v("new Promise")]),s._v("直接执行，输出7。"),e("code",[s._v("then")]),s._v("被分发到微任务Event Queue中。我们记为"),e("code",[s._v("then1")]),s._v("。")]),s._v(" "),e("li",[s._v("又遇到了"),e("code",[s._v("setTimeout")]),s._v("，其回调函数被分发到宏任务Event Queue中，我们记为"),e("code",[s._v("setTimeout2")]),s._v("。")])]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("宏任务Event Queue")]),s._v(" "),e("th",[s._v("微任务Event Queue")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("setTimeout1")]),s._v(" "),e("td",[s._v("process1")])]),s._v(" "),e("tr",[e("td",[s._v("setTimeout2")]),s._v(" "),e("td",[s._v("then1")])])])]),s._v(" "),e("ul",[e("li",[s._v("上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。")]),s._v(" "),e("li",[s._v("我们发现了"),e("code",[s._v("process1")]),s._v("和"),e("code",[s._v("then1")]),s._v("两个微任务。")]),s._v(" "),e("li",[s._v("执行"),e("code",[s._v("process1")]),s._v(",输出6。")]),s._v(" "),e("li",[s._v("执行"),e("code",[s._v("then1")]),s._v("，输出8。")])]),s._v(" "),e("p",[s._v("好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。那么第二轮时间循环从"),e("code",[s._v("setTimeout1")]),s._v("宏任务开始：")]),s._v(" "),e("ul",[e("li",[s._v("首先输出2。接下来遇到了"),e("code",[s._v("process.nextTick()")]),s._v("，同样将其分发到微任务Event Queue中，记为"),e("code",[s._v("process2")]),s._v("。"),e("code",[s._v("new Promise")]),s._v("立即执行输出4，"),e("code",[s._v("then")]),s._v("也分发到微任务Event Queue中，记为"),e("code",[s._v("then2")]),s._v("。")])]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("宏任务Event Queue")]),s._v(" "),e("th",[s._v("微任务Event Queue")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("setTimeout2")]),s._v(" "),e("td",[s._v("process2")])]),s._v(" "),e("tr",[e("td"),s._v(" "),e("td",[s._v("then2")])])])]),s._v(" "),e("ul",[e("li",[s._v("第二轮事件循环宏任务结束，我们发现有"),e("code",[s._v("process2")]),s._v("和"),e("code",[s._v("then2")]),s._v("两个微任务可以执行。")]),s._v(" "),e("li",[s._v("输出3。")]),s._v(" "),e("li",[s._v("输出5。")]),s._v(" "),e("li",[s._v("第二轮事件循环结束，第二轮输出2，4，3，5。")]),s._v(" "),e("li",[s._v("第三轮事件循环开始，此时只剩setTimeout2了，执行。")]),s._v(" "),e("li",[s._v("直接输出9。")]),s._v(" "),e("li",[s._v("将"),e("code",[s._v("process.nextTick()")]),s._v("分发到微任务Event Queue中。记为"),e("code",[s._v("process3")]),s._v("。")]),s._v(" "),e("li",[s._v("直接执行"),e("code",[s._v("new Promise")]),s._v("，输出11。")]),s._v(" "),e("li",[s._v("将"),e("code",[s._v("then")]),s._v("分发到微任务Event Queue中，记为"),e("code",[s._v("then3")]),s._v("。")])]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("宏任务Event Queue")]),s._v(" "),e("th",[s._v("微任务Event Queue")])])]),s._v(" "),e("tbody",[e("tr",[e("td"),s._v(" "),e("td",[s._v("process3")])]),s._v(" "),e("tr",[e("td"),s._v(" "),e("td",[s._v("then3")])])])]),s._v(" "),e("ul",[e("li",[s._v("第三轮事件循环宏任务执行结束，执行两个微任务"),e("code",[s._v("process3")]),s._v("和"),e("code",[s._v("then3")]),s._v("。")]),s._v(" "),e("li",[s._v("输出10。")]),s._v(" "),e("li",[s._v("输出12。")]),s._v(" "),e("li",[s._v("第三轮事件循环结束，第三轮输出9，11，10，12。")])]),s._v(" "),e("p",[s._v("整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。\n(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)")]),s._v(" "),e("h3",{attrs:{id:"_6-写在最后"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-写在最后"}},[s._v("#")]),s._v(" 6.写在最后")]),s._v(" "),e("h4",{attrs:{id:"_1-js的异步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-js的异步"}},[s._v("#")]),s._v(" (1)js的异步")]),s._v(" "),e("p",[s._v("我们从最开头就说javascript是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。")]),s._v(" "),e("h4",{attrs:{id:"_2-事件循环event-loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-事件循环event-loop"}},[s._v("#")]),s._v(" (2)事件循环Event Loop")]),s._v(" "),e("p",[s._v("事件循环是js实现异步的一种方法，也是js的执行机制。")]),s._v(" "),e("h4",{attrs:{id:"_3-javascript的执行和运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-javascript的执行和运行"}},[s._v("#")]),s._v(" (3)javascript的执行和运行")]),s._v(" "),e("p",[s._v("执行和运行有很大的区别，javascript在不同的环境下，比如node，浏览器，Ringo等等，执行方式是不同的。而运行大多指javascript解析引擎，是统一的。")]),s._v(" "),e("h4",{attrs:{id:"_4-setimmediate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-setimmediate"}},[s._v("#")]),s._v(" (4)setImmediate")]),s._v(" "),e("p",[s._v("微任务和宏任务还有很多种类，比如"),e("code",[s._v("setImmediate")]),s._v("等等，执行都是有共同点的，有兴趣的同学可以自行了解。")]),s._v(" "),e("h4",{attrs:{id:"_5-最后的最后"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-最后的最后"}},[s._v("#")]),s._v(" (5)最后的最后")]),s._v(" "),e("ul",[e("li",[s._v("javascript是一门单线程语言")]),s._v(" "),e("li",[s._v("Event Loop是javascript的执行机制")])])])])])}),[],!1,null,null,null);t.default=a.exports}}]);