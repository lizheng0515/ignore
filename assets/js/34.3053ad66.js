(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{366:function(t,r,e){"use strict";e.r(r);var a=e(2),o=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"javascript-算法与数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-算法与数据结构"}},[t._v("#")]),t._v(" JavaScript 算法与数据结构")]),t._v(" "),e("p",[t._v("该仓库包含了多种基于 JavaScript 的算法与数据结构。")]),t._v(" "),e("p",[t._v("每种算法和数据结构都有自己的 README，包含相关说明和链接，以便进一步阅读 (还有 YouTube 视频) 。")]),t._v(" "),e("p",[e("em",[t._v("Read this in other languages:")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/",target:"_blank",rel:"noopener noreferrer"}},[e("em",[t._v("English")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-TW.md",target:"_blank",rel:"noopener noreferrer"}},[e("em",[t._v("繁體中文")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.ko-KR.md",target:"_blank",rel:"noopener noreferrer"}},[e("em",[t._v("한국어")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.ja-JP.md",target:"_blank",rel:"noopener noreferrer"}},[e("em",[t._v("日本語")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.pl-PL.md",target:"_blank",rel:"noopener noreferrer"}},[e("em",[t._v("Polski")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.fr-FR.md",target:"_blank",rel:"noopener noreferrer"}},[e("em",[t._v("Français")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.es-ES.md",target:"_blank",rel:"noopener noreferrer"}},[e("em",[t._v("Español")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.pt-BR.md",target:"_blank",rel:"noopener noreferrer"}},[e("em",[t._v("Português")]),e("OutboundLink")],1)]),t._v(" "),e("p",[e("em",[t._v("注意：这个项目仅用于学习和研究，"),e("strong",[t._v("不是")]),t._v("用于生产环境。")])]),t._v(" "),e("h2",{attrs:{id:"数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[e("OutboundLink")],1),t._v("数据结构")]),t._v(" "),e("p",[t._v("数据结构是在计算机中组织和存储数据的一种特殊方式，使得数据可以高效地被访问和修改。更确切地说，数据结构是数据值的集合，表示数据之间的关系，也包括了作用在数据上的函数或操作。")]),t._v(" "),e("p",[e("code",[t._v("B")]),t._v(" - 初学者， "),e("code",[t._v("A")]),t._v(" - 进阶")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/linked-list/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("链表"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/doubly-linked-list/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("双向链表"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/queue/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("队列"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/stack/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("栈"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/hash-table/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("哈希表"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/heap/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("堆"),e("OutboundLink")],1),t._v(" - 最大堆 & 最小堆")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/priority-queue/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("优先队列"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/trie/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("字典树"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/tree/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("树"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/tree/binary-search-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉查找树"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/tree/avl-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("AVL 树"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/tree/red-black-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("红黑树"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/tree/segment-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("线段树"),e("OutboundLink")],1),t._v(" - 使用 "),e("code",[t._v("最小/最大/总和")]),t._v(" 范围查询示例")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/tree/fenwick-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("树状数组"),e("OutboundLink")],1),t._v(" (二叉索引树)")])])]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/graph/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("图"),e("OutboundLink")],1),t._v(" (有向图与无向图)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/disjoint-set",target:"_blank",rel:"noopener noreferrer"}},[t._v("并查集"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/bloom-filter",target:"_blank",rel:"noopener noreferrer"}},[t._v("布隆过滤器"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md#%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[e("OutboundLink")],1),t._v("算法")]),t._v(" "),e("p",[t._v("算法是如何解决一类问题的明确规范。算法是一组精确定义操作序列的规则。")]),t._v(" "),e("p",[e("code",[t._v("B")]),t._v(" - 初学者， "),e("code",[t._v("A")]),t._v(" - 进阶")]),t._v(" "),e("h3",{attrs:{id:"算法主题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法主题"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md#%E7%AE%97%E6%B3%95%E4%B8%BB%E9%A2%98",target:"_blank",rel:"noopener noreferrer"}},[e("OutboundLink")],1),t._v("算法主题")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("数学")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/bits",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bit 操控"),e("OutboundLink")],1),t._v(" - set/get/update/clear 位、乘以/除以二进制位 、变负等")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/factorial/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("阶乘"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/fibonacci",target:"_blank",rel:"noopener noreferrer"}},[t._v("斐波那契数"),e("OutboundLink")],1),t._v(" - "),e("code",[t._v("经典")]),t._v(" 和 "),e("code",[t._v("闭式")]),t._v(" 版本")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/primality-test",target:"_blank",rel:"noopener noreferrer"}},[t._v("素数检测"),e("OutboundLink")],1),t._v(" (排除法)")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/euclidean-algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("欧几里得算法"),e("OutboundLink")],1),t._v(" - 计算最大公约数 (GCD)")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/least-common-multiple",target:"_blank",rel:"noopener noreferrer"}},[t._v("最小公倍数"),e("OutboundLink")],1),t._v(" (LCM)")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/sieve-of-eratosthenes",target:"_blank",rel:"noopener noreferrer"}},[t._v("素数筛"),e("OutboundLink")],1),t._v(" - 查找任意给定范围内的所有素数")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/is-power-of-two",target:"_blank",rel:"noopener noreferrer"}},[t._v("判断 2 次方数"),e("OutboundLink")],1),t._v(" - 检查数字是否为 2 的幂 (原生和按位算法)")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/pascal-triangle",target:"_blank",rel:"noopener noreferrer"}},[t._v("杨辉三角形"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/complex-number",target:"_blank",rel:"noopener noreferrer"}},[t._v("复数"),e("OutboundLink")],1),t._v(" - 复数及其基本运算")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/radian",target:"_blank",rel:"noopener noreferrer"}},[t._v("弧度和角"),e("OutboundLink")],1),t._v(" - 弧度与角的相互转换")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/fast-powering",target:"_blank",rel:"noopener noreferrer"}},[t._v("快速算次方"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/integer-partition",target:"_blank",rel:"noopener noreferrer"}},[t._v("整数拆分"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/liu-hui",target:"_blank",rel:"noopener noreferrer"}},[t._v("割圆术"),e("OutboundLink")],1),t._v(" - 基于 N-gons 的近似 π 计算")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/fourier-transform",target:"_blank",rel:"noopener noreferrer"}},[t._v("离散傅里叶变换"),e("OutboundLink")],1),t._v(" - 把时间信号解析成构成它的频率")])])]),t._v(" "),e("li",[e("strong",[t._v("集合")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/cartesian-product",target:"_blank",rel:"noopener noreferrer"}},[t._v("笛卡尔积"),e("OutboundLink")],1),t._v(" - 多集合结果")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/fisher-yates",target:"_blank",rel:"noopener noreferrer"}},[t._v("洗牌算法"),e("OutboundLink")],1),t._v(" - 随机置换有限序列")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/power-set",target:"_blank",rel:"noopener noreferrer"}},[t._v("幂集"),e("OutboundLink")],1),t._v(" - 该集合的所有子集")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/permutations",target:"_blank",rel:"noopener noreferrer"}},[t._v("排列"),e("OutboundLink")],1),t._v(" (有/无重复)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/combinations",target:"_blank",rel:"noopener noreferrer"}},[t._v("组合"),e("OutboundLink")],1),t._v(" (有/无重复)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/longest-common-subsequence",target:"_blank",rel:"noopener noreferrer"}},[t._v("最长公共子序列"),e("OutboundLink")],1),t._v(" (LCS)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"}},[t._v("最长递增子序列"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/shortest-common-supersequence",target:"_blank",rel:"noopener noreferrer"}},[t._v("最短公共父序列"),e("OutboundLink")],1),t._v(" (SCS)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/knapsack-problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("背包问题"),e("OutboundLink")],1),t._v(" - "),e("code",[t._v("0/1")]),t._v(" 和 "),e("code",[t._v("无边界")]),t._v(" 问题")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/maximum-subarray",target:"_blank",rel:"noopener noreferrer"}},[t._v("最大子数列问题"),e("OutboundLink")],1),t._v(" - "),e("code",[t._v("BF 算法")]),t._v(" 和 "),e("code",[t._v("动态规划")])]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/combination-sum",target:"_blank",rel:"noopener noreferrer"}},[t._v("组合求和"),e("OutboundLink")],1),t._v(" - 查找形成特定总和的所有组合")])])]),t._v(" "),e("li",[e("strong",[t._v("字符串")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/string/hamming-distance",target:"_blank",rel:"noopener noreferrer"}},[t._v("汉明距离"),e("OutboundLink")],1),t._v(" - 符号不同的位置数")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/string/levenshtein-distance",target:"_blank",rel:"noopener noreferrer"}},[t._v("莱温斯坦距离"),e("OutboundLink")],1),t._v(" - 两个序列之间的最小编辑距离")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/string/knuth-morris-pratt",target:"_blank",rel:"noopener noreferrer"}},[t._v("Knuth–Morris–Pratt 算法"),e("OutboundLink")],1),t._v(" KMP 算法 - 子串搜索 (模式匹配)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/string/rabin-karp",target:"_blank",rel:"noopener noreferrer"}},[t._v("字符串快速查找"),e("OutboundLink")],1),t._v(" - 子串搜索 (模式匹配)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/string/rabin-karp",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rabin Karp 算法"),e("OutboundLink")],1),t._v(" - 子串搜索")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/string/longest-common-substring",target:"_blank",rel:"noopener noreferrer"}},[t._v("最长公共子串"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/string/regular-expression-matching",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式匹配"),e("OutboundLink")],1)])])]),t._v(" "),e("li",[e("strong",[t._v("搜索")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/search/linear-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("线性搜索"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/search/jump-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("跳转搜索/块搜索"),e("OutboundLink")],1),t._v(" - 搜索有序数组")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/search/binary-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("二分查找"),e("OutboundLink")],1),t._v(" - 搜索有序数组")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/search/interpolation-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("插值搜索"),e("OutboundLink")],1),t._v(" - 搜索均匀分布的有序数组")])])]),t._v(" "),e("li",[e("strong",[t._v("排序")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sorting/bubble-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("冒泡排序"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sorting/selection-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("选择排序"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sorting/insertion-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("插入排序"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sorting/heap-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("堆排序"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sorting/merge-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("归并排序"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sorting/quick-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("快速排序"),e("OutboundLink")],1),t._v(" - in-place (原地) 和 non-in-place 版本")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sorting/shell-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("希尔排序"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sorting/counting-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("计数排序"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sorting/radix-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("基数排序"),e("OutboundLink")],1)])])]),t._v(" "),e("li",[e("strong",[t._v("链表")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/linked-list/traversal",target:"_blank",rel:"noopener noreferrer"}},[t._v("正向遍历"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/linked-list/reverse-traversal",target:"_blank",rel:"noopener noreferrer"}},[t._v("反向遍历"),e("OutboundLink")],1)])])]),t._v(" "),e("li",[e("strong",[t._v("树")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/tree/depth-first-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("深度优先搜索"),e("OutboundLink")],1),t._v(" (DFS)")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/tree/breadth-first-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("广度优先搜索"),e("OutboundLink")],1),t._v(" (BFS)")])])]),t._v(" "),e("li",[e("strong",[t._v("图")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/depth-first-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("深度优先搜索"),e("OutboundLink")],1),t._v(" (DFS)")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/breadth-first-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("广度优先搜索"),e("OutboundLink")],1),t._v(" (BFS)")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/kruskal",target:"_blank",rel:"noopener noreferrer"}},[t._v("克鲁斯克尔演算法"),e("OutboundLink")],1),t._v(" - 寻找加权无向图的最小生成树 (MST)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/dijkstra",target:"_blank",rel:"noopener noreferrer"}},[t._v("戴克斯特拉算法"),e("OutboundLink")],1),t._v(" - 找到图中所有顶点的最短路径")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/bellman-ford",target:"_blank",rel:"noopener noreferrer"}},[t._v("贝尔曼-福特算法"),e("OutboundLink")],1),t._v(" - 找到图中所有顶点的最短路径")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/floyd-warshall",target:"_blank",rel:"noopener noreferrer"}},[t._v("弗洛伊德算法"),e("OutboundLink")],1),t._v(" - 找到所有顶点对 之间的最短路径")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/detect-cycle",target:"_blank",rel:"noopener noreferrer"}},[t._v("判圈算法"),e("OutboundLink")],1),t._v(" - 对于有向图和无向图 (基于 DFS 和不相交集的版本)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/prim",target:"_blank",rel:"noopener noreferrer"}},[t._v("普林演算法"),e("OutboundLink")],1),t._v(" - 寻找加权无向图的最小生成树 (MST)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/topological-sorting",target:"_blank",rel:"noopener noreferrer"}},[t._v("拓扑排序"),e("OutboundLink")],1),t._v(" - DFS 方法")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/articulation-points",target:"_blank",rel:"noopener noreferrer"}},[t._v("关节点"),e("OutboundLink")],1),t._v(" - Tarjan 算法 (基于 DFS)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/bridges",target:"_blank",rel:"noopener noreferrer"}},[t._v("桥"),e("OutboundLink")],1),t._v(" - 基于 DFS 的算法")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/eulerian-path",target:"_blank",rel:"noopener noreferrer"}},[t._v("欧拉回径与一笔画问题"),e("OutboundLink")],1),t._v(" - Fleury 的算法 - 一次访问每个边")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/hamiltonian-cycle",target:"_blank",rel:"noopener noreferrer"}},[t._v("哈密顿图"),e("OutboundLink")],1),t._v(" - 恰好访问每个顶点一次")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/strongly-connected-components",target:"_blank",rel:"noopener noreferrer"}},[t._v("强连通分量"),e("OutboundLink")],1),t._v(" - Kosaraju 算法")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/travelling-salesman",target:"_blank",rel:"noopener noreferrer"}},[t._v("旅行推销员问题"),e("OutboundLink")],1),t._v(" - 尽可能以最短的路线访问每个城市并返回原始城市")])])]),t._v(" "),e("li",[e("strong",[t._v("加密")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/cryptography/polynomial-hash",target:"_blank",rel:"noopener noreferrer"}},[t._v("多项式 hash"),e("OutboundLink")],1),t._v(" - 基于多项式的 rolling hash 函数")])])]),t._v(" "),e("li",[e("strong",[t._v("未分类")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/hanoi-tower",target:"_blank",rel:"noopener noreferrer"}},[t._v("汉诺塔"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/square-matrix-rotation",target:"_blank",rel:"noopener noreferrer"}},[t._v("旋转矩阵"),e("OutboundLink")],1),t._v(" - 原地算法")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/jump-game",target:"_blank",rel:"noopener noreferrer"}},[t._v("跳跃游戏"),e("OutboundLink")],1),t._v(" - 回溯,、动态编程 (自上而下+自下而上) 和贪婪的例子")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/unique-paths",target:"_blank",rel:"noopener noreferrer"}},[t._v("独特(唯一) 路径"),e("OutboundLink")],1),t._v(" - 回溯、动态编程和基于 Pascal 三角形的例子")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/rain-terraces",target:"_blank",rel:"noopener noreferrer"}},[t._v("雨水收集"),e("OutboundLink")],1),t._v(" - 诱捕雨水问题 (动态编程和暴力版本)")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/recursive-staircase",target:"_blank",rel:"noopener noreferrer"}},[t._v("递归楼梯"),e("OutboundLink")],1),t._v(" - 计算有共有多少种方法可以到达顶层 (4 种解题方案)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/n-queens",target:"_blank",rel:"noopener noreferrer"}},[t._v("八皇后问题"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/knight-tour",target:"_blank",rel:"noopener noreferrer"}},[t._v("骑士巡逻"),e("OutboundLink")],1)])])])]),t._v(" "),e("h3",{attrs:{id:"算法范式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法范式"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md#%E7%AE%97%E6%B3%95%E8%8C%83%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[e("OutboundLink")],1),t._v("算法范式")]),t._v(" "),e("p",[t._v("算法范式是一种通用方法，基于一类算法的设计。这是比算法更高的抽象，就像算法是比计算机程序更高的抽象。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("BF 算法")]),t._v(" - "),e("code",[t._v("查找/搜索")]),t._v(" 所有可能性并选择最佳解决方案\n"),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/search/linear-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("线性搜索"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/rain-terraces",target:"_blank",rel:"noopener noreferrer"}},[t._v("雨水收集"),e("OutboundLink")],1),t._v(" - 诱导雨水问题")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/recursive-staircase",target:"_blank",rel:"noopener noreferrer"}},[t._v("递归楼梯"),e("OutboundLink")],1),t._v(" - 计算有共有多少种方法可以到达顶层 (4 种解题方案)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/maximum-subarray",target:"_blank",rel:"noopener noreferrer"}},[t._v("最大子数列"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/travelling-salesman",target:"_blank",rel:"noopener noreferrer"}},[t._v("旅行推销员问题"),e("OutboundLink")],1),t._v(" - 尽可能以最短的路线访问每个城市并返回原始城市")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/fourier-transform",target:"_blank",rel:"noopener noreferrer"}},[t._v("离散傅里叶变换"),e("OutboundLink")],1),t._v(" - 把时间信号解析成构成它的频率")])])]),t._v(" "),e("li",[e("strong",[t._v("贪心法")]),t._v(" - 在当前选择最佳选项，不考虑以后情况\n"),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/jump-game",target:"_blank",rel:"noopener noreferrer"}},[t._v("跳跃游戏"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/knapsack-problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("背包问题"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/dijkstra",target:"_blank",rel:"noopener noreferrer"}},[t._v("戴克斯特拉算法"),e("OutboundLink")],1),t._v(" - 找到所有图顶点的最短路径")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/prim",target:"_blank",rel:"noopener noreferrer"}},[t._v("普里姆算法"),e("OutboundLink")],1),t._v(" - 寻找加权无向图的最小生成树 (MST)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/kruskal",target:"_blank",rel:"noopener noreferrer"}},[t._v("克鲁斯卡尔算法"),e("OutboundLink")],1),t._v(" - 寻找加权无向图的最小生成树 (MST)")])])]),t._v(" "),e("li",[e("strong",[t._v("分治法")]),t._v(" - 将问题分成较小的部分，然后解决这些部分\n"),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/search/binary-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("二分查找"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/hanoi-tower",target:"_blank",rel:"noopener noreferrer"}},[t._v("汉诺塔"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/pascal-triangle",target:"_blank",rel:"noopener noreferrer"}},[t._v("杨辉三角形"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/euclidean-algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("欧几里得算法"),e("OutboundLink")],1),t._v(" - 计算最大公约数 (GCD)")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sorting/merge-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("归并排序"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sorting/quick-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("快速排序"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/tree/depth-first-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("树深度优先搜索"),e("OutboundLink")],1),t._v(" (DFS)")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/depth-first-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("图深度优先搜索"),e("OutboundLink")],1),t._v(" (DFS)")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/jump-game",target:"_blank",rel:"noopener noreferrer"}},[t._v("跳跃游戏"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/fast-powering",target:"_blank",rel:"noopener noreferrer"}},[t._v("快速算次方"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/permutations",target:"_blank",rel:"noopener noreferrer"}},[t._v("排列"),e("OutboundLink")],1),t._v(" (有/无重复)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/combinations",target:"_blank",rel:"noopener noreferrer"}},[t._v("组合"),e("OutboundLink")],1),t._v(" (有/无重复)")])])]),t._v(" "),e("li",[e("strong",[t._v("动态编程")]),t._v(" - 使用以前找到的子解决方案构建解决方案\n"),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/fibonacci",target:"_blank",rel:"noopener noreferrer"}},[t._v("斐波那契数"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/jump-game",target:"_blank",rel:"noopener noreferrer"}},[t._v("跳跃游戏"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/unique-paths",target:"_blank",rel:"noopener noreferrer"}},[t._v("独特路径"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/rain-terraces",target:"_blank",rel:"noopener noreferrer"}},[t._v("雨水收集"),e("OutboundLink")],1),t._v(" - 疏导雨水问题")]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/recursive-staircase",target:"_blank",rel:"noopener noreferrer"}},[t._v("递归楼梯"),e("OutboundLink")],1),t._v(" - 计算有共有多少种方法可以到达顶层 (4 种解题方案)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/string/levenshtein-distance",target:"_blank",rel:"noopener noreferrer"}},[t._v("莱温斯坦距离"),e("OutboundLink")],1),t._v(" - 两个序列之间的最小编辑距离")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/longest-common-subsequence",target:"_blank",rel:"noopener noreferrer"}},[t._v("最长公共子序列"),e("OutboundLink")],1),t._v(" (LCS)")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/string/longest-common-substring",target:"_blank",rel:"noopener noreferrer"}},[t._v("最长公共子串"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"}},[t._v("最长递增子序列"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/shortest-common-supersequence",target:"_blank",rel:"noopener noreferrer"}},[t._v("最短公共子序列"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/knapsack-problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("0-1背包问题"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/math/integer-partition",target:"_blank",rel:"noopener noreferrer"}},[t._v("整数拆分"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/maximum-subarray",target:"_blank",rel:"noopener noreferrer"}},[t._v("最大子数列"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/bellman-ford",target:"_blank",rel:"noopener noreferrer"}},[t._v("贝尔曼-福特算法"),e("OutboundLink")],1),t._v(" - 找到所有图顶点的最短路径")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/floyd-warshall",target:"_blank",rel:"noopener noreferrer"}},[t._v("弗洛伊德算法"),e("OutboundLink")],1),t._v(" - 找到所有顶点对之间的最短路径")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/string/regular-expression-matching",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式匹配"),e("OutboundLink")],1)])])]),t._v(" "),e("li",[e("strong",[t._v("回溯法")]),t._v(" - 类似于 "),e("code",[t._v("BF 算法")]),t._v(" 试图产生所有可能的解决方案，但每次生成解决方案测试如果它满足所有条件，那么只有继续生成后续解决方案。否则回溯并继续寻找不同路径的解决方案。\n"),e("ul",[e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/jump-game",target:"_blank",rel:"noopener noreferrer"}},[t._v("跳跃游戏"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("B")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/unique-paths",target:"_blank",rel:"noopener noreferrer"}},[t._v("独特路径"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/power-set",target:"_blank",rel:"noopener noreferrer"}},[t._v("幂集"),e("OutboundLink")],1),t._v(" - 该集合的所有子集")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/graph/hamiltonian-cycle",target:"_blank",rel:"noopener noreferrer"}},[t._v("哈密顿图"),e("OutboundLink")],1),t._v(" - 恰好访问每个顶点一次")]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/n-queens",target:"_blank",rel:"noopener noreferrer"}},[t._v("八皇后问题"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/uncategorized/knight-tour",target:"_blank",rel:"noopener noreferrer"}},[t._v("骑士巡逻"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("A")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/algorithms/sets/combination-sum",target:"_blank",rel:"noopener noreferrer"}},[t._v("组合求和"),e("OutboundLink")],1),t._v(" - 从规定的总和中找出所有的组合")])])]),t._v(" "),e("li",[e("strong",[t._v("Branch & Bound")]),t._v(" - 记住在回溯搜索的每个阶段找到的成本最低的解决方案，并使用到目前为止找到的成本最小值作为下限。以便丢弃成本大于最小值的解决方案。通常，使用 BFS 遍历以及状态空间树的 DFS 遍历。")])]),t._v(" "),e("h2",{attrs:{id:"如何使用本仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何使用本仓库"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%9C%AC%E4%BB%93%E5%BA%93",target:"_blank",rel:"noopener noreferrer"}},[e("OutboundLink")],1),t._v("如何使用本仓库")]),t._v(" "),e("p",[e("strong",[t._v("安装依赖")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm install\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("strong",[t._v("运行 ESLint")])]),t._v(" "),e("p",[t._v("检查代码质量")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm run lint\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("strong",[t._v("执行测试")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm test\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("strong",[t._v("按照名称执行测试")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm test -- 'LinkedList'\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("strong",[t._v("Playground")])]),t._v(" "),e("p",[t._v("你可以在 "),e("code",[t._v("./src/playground/playground.js")]),t._v(" 文件中操作数据结构与算法，并在 "),e("code",[t._v("./src/playground/__test__/playground.test.js")]),t._v(" 中编写测试。")]),t._v(" "),e("p",[t._v("然后，只需运行以下命令来测试你的 Playground 是否按无误:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm test -- 'playground'\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h2",{attrs:{id:"有用的信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有用的信息"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md#%E6%9C%89%E7%94%A8%E7%9A%84%E4%BF%A1%E6%81%AF",target:"_blank",rel:"noopener noreferrer"}},[e("OutboundLink")],1),t._v("有用的信息")]),t._v(" "),e("h3",{attrs:{id:"引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md#%E5%BC%95%E7%94%A8",target:"_blank",rel:"noopener noreferrer"}},[e("OutboundLink")],1),t._v("引用")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.youtube.com/playlist?list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"}},[t._v("▶ YouTube"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"大o符号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#大o符号"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md#%E5%A4%A7o%E7%AC%A6%E5%8F%B7",target:"_blank",rel:"noopener noreferrer"}},[e("OutboundLink")],1),t._v("大O符号")]),t._v(" "),e("p",[t._v("大O符号中指定的算法的增长顺序。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/assets/big-o-graph.png",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://github.com/trekhleb/javascript-algorithms/raw/master/assets/big-o-graph.png",alt:"Big O graphs"}}),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("源: "),e("a",{attrs:{href:"http://bigocheatsheet.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Big O Cheat Sheet"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("以下是一些最常用的 大O标记法 列表以及它们与不同大小输入数据的性能比较。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("大O标记法")]),t._v(" "),e("th",[t._v("计算10个元素")]),t._v(" "),e("th",[t._v("计算100个元素")]),t._v(" "),e("th",[t._v("计算1000个元素")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("strong",[t._v("O(1)")])]),t._v(" "),e("td",[t._v("1")]),t._v(" "),e("td",[t._v("1")]),t._v(" "),e("td",[t._v("1")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("O(log N)")])]),t._v(" "),e("td",[t._v("3")]),t._v(" "),e("td",[t._v("6")]),t._v(" "),e("td",[t._v("9")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("O(N)")])]),t._v(" "),e("td",[t._v("10")]),t._v(" "),e("td",[t._v("100")]),t._v(" "),e("td",[t._v("1000")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("O(N log N)")])]),t._v(" "),e("td",[t._v("30")]),t._v(" "),e("td",[t._v("600")]),t._v(" "),e("td",[t._v("9000")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("O(N^2)")])]),t._v(" "),e("td",[t._v("100")]),t._v(" "),e("td",[t._v("10000")]),t._v(" "),e("td",[t._v("1000000")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("O(2^N)")])]),t._v(" "),e("td",[t._v("1024")]),t._v(" "),e("td",[t._v("1.26e+29")]),t._v(" "),e("td",[t._v("1.07e+301")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("O(N!)")])]),t._v(" "),e("td",[t._v("3628800")]),t._v(" "),e("td",[t._v("9.3e+157")]),t._v(" "),e("td",[t._v("4.02e+2567")])])])]),t._v(" "),e("h3",{attrs:{id:"数据结构操作的复杂性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构操作的复杂性"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%93%8D%E4%BD%9C%E7%9A%84%E5%A4%8D%E6%9D%82%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[e("OutboundLink")],1),t._v("数据结构操作的复杂性")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("数据结构")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("连接")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("查找")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("插入")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("删除")]),t._v(" "),e("th",[t._v("备注")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("strong",[t._v("数组")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("栈")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("队列")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("链表")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("哈希表")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",[t._v("在完全哈希函数情况下，复杂度是 O(1）")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("二分查找树")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",[t._v("在平衡树情况下，复杂度是 O(log(n))")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("B 树")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("红黑树")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("AVL 树")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("布隆过滤器")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),e("td",[t._v("存在一定概率的判断错误（误判成存在）")])])])]),t._v(" "),e("h3",{attrs:{id:"数组排序算法的复杂性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组排序算法的复杂性"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md#%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%A4%8D%E6%9D%82%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[e("OutboundLink")],1),t._v("数组排序算法的复杂性")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("最优")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("平均")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("最坏")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("内存")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("稳定")]),t._v(" "),e("th",[t._v("备注")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("strong",[t._v("冒泡排序")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Yes")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("插入排序")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Yes")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("选择排序")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("No")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("堆排序")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("No")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("归并排序")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Yes")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("快速排序")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("No")]),t._v(" "),e("td",[t._v("在 in-place 版本下，内存复杂度通常是 O(log(n))")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("希尔排序")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("取决于差距序列")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n (log(n))^2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("No")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("计数排序")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n + r")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n + r")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n + r")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n + r")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Yes")]),t._v(" "),e("td",[t._v("r - 数组里最大的数")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("基数排序")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n * k")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n * k")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n * k")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n + k")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Yes")]),t._v(" "),e("td",[t._v("k - 最长 key 的升序")])])])])])}),[],!1,null,null,null);r.default=o.exports}}]);