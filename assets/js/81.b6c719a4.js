(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{412:function(a,e,t){"use strict";t.r(e);var s=t(2),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"javascript深入之闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript深入之闭包"}},[a._v("#")]),a._v(" JavaScript深入之闭包")]),a._v(" "),t("blockquote",[t("p",[a._v("JavaScript深入系列第八篇，介绍理论上的闭包和实践上的闭包，以及从作用域链的角度解析经典的闭包题。")])]),a._v(" "),t("h2",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[a._v("#")]),a._v(" 定义")]),a._v(" "),t("p",[a._v("MDN 对闭包的定义为：")]),a._v(" "),t("blockquote",[t("p",[a._v("闭包是指那些能够访问自由变量的函数。")])]),a._v(" "),t("p",[a._v("那什么是自由变量呢？")]),a._v(" "),t("blockquote",[t("p",[a._v("自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。")])]),a._v(" "),t("p",[a._v("由此，我们可以看出闭包共有两部分组成：")]),a._v(" "),t("blockquote",[t("p",[a._v("闭包 = 函数 + 函数能够访问的自由变量")])]),a._v(" "),t("p",[a._v("举个例子：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var a = 1;\n\nfunction foo() {    console.log(a);}foo();\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("foo 函数可以访问变量 a，但是 a 既不是 foo 函数的局部变量，也不是 foo 函数的参数，所以 a 就是自由变量。")]),a._v(" "),t("p",[a._v("那么，函数 foo + foo 函数访问的自由变量 a 不就是构成了一个闭包嘛……")]),a._v(" "),t("p",[a._v("还真是这样的！")]),a._v(" "),t("p",[a._v("所以在《JavaScript权威指南》中就讲到：从技术的角度讲，所有的JavaScript函数都是闭包。")]),a._v(" "),t("p",[a._v("咦，这怎么跟我们平时看到的讲到的闭包不一样呢！？")]),a._v(" "),t("p",[a._v("别着急，这是理论上的闭包，其实还有一个实践角度上的闭包，让我们看看汤姆大叔翻译的关于闭包的文章中的定义：")]),a._v(" "),t("p",[a._v("ECMAScript中，闭包指的是：")]),a._v(" "),t("ol",[t("li",[a._v("从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。")]),a._v(" "),t("li",[a._v("从实践角度：以下函数才算是闭包：\n"),t("ol",[t("li",[a._v("即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）")]),a._v(" "),t("li",[a._v("在代码中引用了自由变量")])])])]),a._v(" "),t("p",[a._v("接下来就来讲讲实践上的闭包。")]),a._v(" "),t("h2",{attrs:{id:"分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分析"}},[a._v("#")]),a._v(" 分析")]),a._v(" "),t("p",[a._v("让我们先写个例子，例子依然是来自《JavaScript权威指南》，稍微做点改动：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var scope = "global scope";\nfunction checkscope(){    var scope = "local scope";    function f(){        return scope;    }    return f;}\n\nvar foo = checkscope();foo();\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("首先我们要分析一下这段代码中执行上下文栈和执行上下文的变化情况。")]),a._v(" "),t("p",[a._v("另一个与这段代码相似的例子，在"),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/8",target:"_blank",rel:"noopener noreferrer"}},[a._v("《JavaScript深入之执行上下文》"),t("OutboundLink")],1),a._v("中有着非常详细的分析。如果看不懂以下的执行过程，建议先阅读这篇文章。")]),a._v(" "),t("p",[a._v("这里直接给出简要的执行过程：")]),a._v(" "),t("ol",[t("li",[a._v("进入全局代码，创建全局执行上下文，全局执行上下文压入执行上下文栈")]),a._v(" "),t("li",[a._v("全局执行上下文初始化")]),a._v(" "),t("li",[a._v("执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 执行上下文被压入执行上下文栈")]),a._v(" "),t("li",[a._v("checkscope 执行上下文初始化，创建变量对象、作用域链、this等")]),a._v(" "),t("li",[a._v("checkscope 函数执行完毕，checkscope 执行上下文从执行上下文栈中弹出")]),a._v(" "),t("li",[a._v("执行 f 函数，创建 f 函数执行上下文，f 执行上下文被压入执行上下文栈")]),a._v(" "),t("li",[a._v("f 执行上下文初始化，创建变量对象、作用域链、this等")]),a._v(" "),t("li",[a._v("f 函数执行完毕，f 函数上下文从执行上下文栈中弹出")])]),a._v(" "),t("p",[a._v("了解到这个过程，我们应该思考一个问题，那就是：")]),a._v(" "),t("p",[a._v("当 f 函数执行的时候，checkscope 函数上下文已经被销毁了啊(即从执行上下文栈中被弹出)，怎么还会读取到 checkscope 作用域下的 scope 值呢？")]),a._v(" "),t("p",[a._v("以上的代码，要是转换成 PHP，就会报错，因为在 PHP 中，f 函数只能读取到自己作用域和全局作用域里的值，所以读不到 checkscope 下的 scope 值。(这段我问的PHP同事……)")]),a._v(" "),t("p",[a._v("然而 JavaScript 却是可以的！")]),a._v(" "),t("p",[a._v("当我们了解了具体的执行过程后，我们知道 f 执行上下文维护了一个作用域链：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("fContext = {    Scope: [AO, checkscopeContext.AO, globalContext.VO],}复制代码\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("对的，就是因为这个作用域链，f 函数依然可以读取到 checkscopeContext.AO 的值，说明当 f 函数引用了 checkscopeContext.AO 中的值的时候，即使 checkscopeContext 被销毁了，但是 JavaScript 依然会让 checkscopeContext.AO 活在内存中，f 函数依然可以通过 f 函数的作用域链找到它，正是因为 JavaScript 做到了这一点，从而实现了闭包这个概念。")]),a._v(" "),t("p",[a._v("所以，让我们再看一遍实践角度上闭包的定义：")]),a._v(" "),t("ol",[t("li",[a._v("即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）")]),a._v(" "),t("li",[a._v("在代码中引用了自由变量")])]),a._v(" "),t("p",[a._v("在这里再补充一个《JavaScript权威指南》英文原版对闭包的定义:")]),a._v(" "),t("blockquote",[t("p",[a._v("This combination of a function object and a scope (a set of variable bindings) in which the function’s variables are resolved is called a closure in the computer science literature.")])]),a._v(" "),t("p",[a._v("闭包在计算机科学中也只是一个普通的概念，大家不要去想得太复杂。")]),a._v(" "),t("h2",{attrs:{id:"必刷题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#必刷题"}},[a._v("#")]),a._v(" 必刷题")]),a._v(" "),t("p",[a._v("接下来，看这道刷题必刷，面试必考的闭包题：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var data = [];\n\nfor (var i = 0; i < 3; i++) {  data[i] = function () {    console.log(i);  };}data[0]();data[1]();data[2]();复制代码\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("答案是都是 3，让我们分析一下原因：")]),a._v(" "),t("p",[a._v("当执行到 data[0] 函数之前，此时全局上下文的 VO 为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("globalContext = {    VO: {        data: [...],        i: 3\n    }}复制代码\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("当执行 data[0] 函数的时候，data[0] 函数的作用域链为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("data[0]Context = {    Scope: [AO, globalContext.VO]}复制代码\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("data[0]Context 的 AO 并没有 i 值，所以会从 globalContext.VO 中查找，i 为 3，所以打印的结果就是 3。")]),a._v(" "),t("p",[a._v("data[1] 和 data[2] 是一样的道理。")]),a._v(" "),t("p",[a._v("所以让我们改成闭包看看：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var data = [];\n\nfor (var i = 0; i < 3; i++) {  data[i] = (function (i) {        return function(){            console.log(i);        }  })(i);}data[0]();data[1]();data[2]();复制代码\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("当执行到 data[0] 函数之前，此时全局上下文的 VO 为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("globalContext = {    VO: {        data: [...],        i: 3\n    }}复制代码\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("跟没改之前一模一样。")]),a._v(" "),t("p",[a._v("当执行 data[0] 函数的时候，data[0] 函数的作用域链发生了改变：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("data[0]Context = {    Scope: [AO, 匿名函数Context.AO globalContext.VO]}复制代码\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("匿名函数执行上下文的 AO 为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("匿名函数Context = {    AO: {        arguments: {            0: 0,            length: 1\n        },        i: 0\n    }}复制代码\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("data[0]Context 的 AO 并没有 i 值，所以会沿着作用域链从匿名函数 Context.AO 中查找，这时候就会找 i 为 0，找到了就不会往 globalContext.VO 中查找了，即使 globalContext.VO 也有 i 的值(值为3)，所以打印的结果就是 0。")]),a._v(" "),t("p",[a._v("data[1] 和 data[2] 是一样的道理。")])])}),[],!1,null,null,null);e.default=n.exports}}]);