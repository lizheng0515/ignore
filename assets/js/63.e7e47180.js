(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{390:function(s,e,n){"use strict";n.r(e);var a=n(2),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"es2020-新特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#es2020-新特性"}},[s._v("#")]),s._v(" ES2020 新特性")]),s._v(" "),n("blockquote",[n("p",[s._v("这几年，Ecma TC39一年一次更新 ecmascript 规范标准，截止目前，以下特性已进入 "),n("code",[s._v("finished")]),s._v(" 状态。现在带大家体验种草 ES2020 新特性。")])]),s._v(" "),n("h2",{attrs:{id:"一：promise-allsettled"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一：promise-allsettled"}},[s._v("#")]),s._v(" 一：Promise.allSettled")]),s._v(" "),n("h3",{attrs:{id:"promise-all-缺陷"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise-all-缺陷"}},[s._v("#")]),s._v(" Promise.all 缺陷")]),s._v(" "),n("p",[s._v("都知道 "),n("code",[s._v("Promise.all")]),s._v(" 具有并发执行异步任务的能力。但它的最大问题就是如果其中某个任务出现异常(reject)，所有任务都会挂掉，Promise直接进入\b "),n("code",[s._v("reject")]),s._v(" 状态。")]),s._v(" "),n("p",[s._v("想象这个场景：你的页面有三个区域，分别对应三个独立的接口数据，使用 "),n("code",[s._v("Promise.all")]),s._v(" 来并发三个接口，如果其中任意一个接口服务异常，状态是reject,这会导致页面中该三个区域数据全都无法渲染出来，因为任何 "),n("code",[s._v("reject")]),s._v(" 都会进入catch回调, 很明显，这是无法接受的，如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Promise.all([\n    Promise.reject({code: 500, msg: '服务异常'}),\n    Promise.resolve({ code: 200, list: []}),\n    Promise.resolve({code: 200, list: []})\n])\n.then((ret) => {\n    // 如果其中一个任务是 reject，则不会执行到这个回调。\n    RenderContent(ret);\n})\n.catch((error) => {\n    // 本例中会执行到这个回调\n    // error: {code: 500, msg: \"服务异常\"}\n})\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("我们需要一种机制，如果并发任务中，无论一个任务正常或者异常，都会返回对应的的状态（fulfilled 或者 rejected）与结果（业务value 或者 拒因 reason），在 then 里面通过 filter 来过滤出想要的业务逻辑结果，这就能最大限度的保障业务当前状态的可访问性，而 "),n("code",[s._v("Promise.allSettled")]),s._v(" 就是解决这问题的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('Promise.allSettled([\n    Promise.reject({code: 500, msg: \'服务异常\'}),\n    Promise.resolve({ code: 200, list: []}),\n    Promise.resolve({code: 200, list: []})\n])\n.then((ret) => {\n    /*\n        0: {status: "rejected", reason: {…}}\n        1: {status: "fulfilled", value: {…}}\n        2: {status: "fulfilled", value: {…}}\n    */\n    // 过滤掉 rejected 状态，尽可能多的保证页面区域数据渲染\n    RenderContent(ret.filter((el) => {\n        return el.status !== \'rejected\';\n    }));\n});\n\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h2",{attrs:{id:"二：可选链（optional-chaining）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二：可选链（optional-chaining）"}},[s._v("#")]),s._v(" 二：可选链（Optional chaining）")]),s._v(" "),n("p",[n("code",[s._v("可选链")]),s._v(" 可让我们在查询具有多层级的对象时，不再需要进行冗余的各种前置校验。")]),s._v(" "),n("p",[s._v("日常开发中，我们经常会遇到这种查询")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var name = user && user.info && user.info.name;\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("又或是这种")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var age = user && user.info && user.info.getAge && user.info.getAge();\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("这是一种丑陋但又不得不做的前置校验，否则很容易命中 "),n("code",[s._v("Uncaught TypeError: Cannot read property...")]),s._v(" 这种错误，这极有可能让你整个应用挂掉。")]),s._v(" "),n("p",[s._v("用了 Optional Chaining ，上面代码会变成")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var name = user?.info?.name;\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var age = user?.info?.getAge?.();\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("可选链中的 "),n("code",[s._v("?")]),s._v(" 表示如果问号左边表达式有值, 就会继续查询问号后面的字段。根据上面可以看出，用可选链可以大量简化类似繁琐的前置校验操作，而且更安全。")]),s._v(" "),n("h2",{attrs:{id:"三：空值合并运算符（nullish-coalescing-operator）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三：空值合并运算符（nullish-coalescing-operator）"}},[s._v("#")]),s._v(" 三：空值合并运算符（Nullish coalescing Operator）")]),s._v(" "),n("p",[s._v("当我们查询某个属性时，经常会遇到，如果没有该属性就会设置一个默认的值。比如下面代码中查询玩家等级。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var level =  user.data.level || '暂无等级';\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("在JS中，空字符串、0 ，当进行逻辑操作符判时，会自动转化为 false。在上面的代码里，如果玩家等级本身就是 0 级, 变量 level 就会被赋值 "),n("code",[s._v("暂无等级")]),s._v(" 字符串，这是逻辑错误，有时候业务上，我们只需容错取值查询到"),n("code",[s._v("undefined")]),s._v(" 或者 "),n("code",[s._v("null")]),s._v(" ，比如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// {\n//    \"level\": null\n// }\nvar level = user.level !== undefined && user.level !== null\n            ? user.level\n            : '暂无等级';\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("来看看用空值合并运算符如何处理")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// {\n//   \"level\": 0   \n// }\nvar level = user.level ?? '暂无等级'; // level -> 0\n\n\n// {\n//   \"an_other_field\": 0   \n// }\nvar level = user.level ?? '暂无等级'; // level -> '暂无等级'\n\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("，用空值合并运算在逻辑正确的前提下，代码更加简洁。")]),s._v(" "),n("p",[s._v("空值合并运算符 与 可选链 相结合，可以很轻松处理多级查询并赋予默认值问题。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var level = user.data?.level ?? '暂无等级';\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"四：dynamic-import"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四：dynamic-import"}},[s._v("#")]),s._v(" 四：dynamic-import")]),s._v(" "),n("p",[s._v("按需 import 提案几年前就已提出，如今终于能进入ES正式规范。这里个人理解成“按需”更为贴切。现代前端打包资源越来越大，打包成几M的JS资源已成常态，而往往前端应用初始化时根本不需要全量加载逻辑资源，为了首屏渲染速度更快，很多时候都是按需加载，比如懒加载图片等。而这些按需执行逻辑资源都体现在某一个事件回调中去加载。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("el.onclick = () => {\n    import(`/path/current-logic.js`)\n    .then((module) => {\n        module.doSomthing();\n    })\n    .catch((err) => {\n        // load error;\n    })\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("当然，webpack目前已很好的支持了该特性。")]),s._v(" "),n("h2",{attrs:{id:"五：globalthis"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五：globalthis"}},[s._v("#")]),s._v(" 五：globalThis")]),s._v(" "),n("p",[s._v("Javascript 在不同的环境获取全局对象有不通的方式，node 中通过 global, web中通过 window, self 等，有些甚至通过 this 获取，但通过 this 是及其危险的，this 在 js 中异常复杂，它严重依赖当前的执行上下文，这些无疑增加了获取全局对象的复杂性。")]),s._v(" "),n("p",[s._v("过去获取全局对象，可通过一个全局函数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var getGlobal = function () { \n  if (typeof self !== 'undefined') { return self; } \n  if (typeof window !== 'undefined') { return window; } \n  if (typeof global !== 'undefined') { return global; } \n  throw new Error('unable to locate global object'); \n}; \n\nvar globals = getGlobal(); \n\n// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("而 globalThis 目的就是提供一种标准化方式访问全局对象，有了 globalThis 后，你可以在任意上下文，任意时刻都能获取到全局对象。")]),s._v(" "),n("h2",{attrs:{id:"六：bigint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六：bigint"}},[s._v("#")]),s._v(" 六：BigInt")]),s._v(" "),n("p",[s._v("Js 中 Number类型只能安全的表示"),n("code",[s._v("-(2^53-1)")]),s._v("至 "),n("code",[s._v("2^53-1")]),s._v(" 范的值，即Number.MIN_SAFE_INTEGER 至Number.MAX_SAFE_INTEGER，超出这个范围的整数计算或者表示会丢失精度。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var num = Number.MAX_SAFE_INTEGER;  // -> 9007199254740991\n\nnum = num + 1; // -> 9007199254740992\n\n// 再次加 +1 后无法正常运算\nnum = num + 1; // -> 9007199254740992\n\n// 两个不同的值，却返回了true\n9007199254740992 === 9007199254740993  // -> true\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("为解决此问题，ES2020提供一种新的数据类型：BigInt。 使用 BigInt 有两种方式：")]),s._v(" "),n("ol",[n("li",[s._v("在整数字面量后面加"),n("code",[s._v("n")]),s._v("。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var bigIntNum = 9007199254740993n;\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ol",[n("li",[s._v("使用 "),n("code",[s._v("BigInt")]),s._v(" 函数。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var bigIntNum = BigInt(9007199254740);\nvar anOtherBigIntNum = BigInt('9007199254740993');\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("通过 BigInt， 我们可以安全的进行大数整型计算。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var bigNumRet = 9007199254740993n + 9007199254740993n; // -> -> 18014398509481986n\n\nbigNumRet.toString(); // -> '18014398509481986'\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("注意:")]),s._v(" "),n("ol",[n("li",[s._v("BigInt 是一种新的数据原始（primitive）类型。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("typeof 9007199254740993n; // -> 'bigint'\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ol",[n("li",[s._v("尽可能避免通过调用函数 "),n("code",[s._v("BigInt")]),s._v(" 方式来实例化超大整型。因为参数的字面量实际也是 Number 类型的一次实例化，超出安全范围的数字，可能会引起精度丢失。")])]),s._v(" "),n("h2",{attrs:{id:"七：string-prototype-matchall"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七：string-prototype-matchall"}},[s._v("#")]),s._v(" 七：String.prototype.matchAll")]),s._v(" "),n("p",[s._v("思考下面代码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'<text>JS</text><text>正则</text>\';\nvar reg = /<\\w+>(.*?)<\\/\\w+>/g;\n\nconsole.log(str.match(reg));\n// -> ["<text>JS</text>", "<text>正则</text>"]\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("可以看出返回的数组里包含了父匹配项，但未匹配到子项（group）。移除全局搜索符“g”试试。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'<text>JS</text><text>正则</text>\';\n// 注意这里没有全局搜素标示符“g”\nvar reg = /<\\w+>(.*?)<\\/\\w+>/;\nconsole.log(str.match(reg));\n\n// 上面会打印出\n/*\n[\n    "<text>JS</text>", \n    "JS", \n    index: 0, \n    input: \n    "<text>JS</text><text>正则</text>", \n    groups: undefined\n]\n*/\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[s._v("这样可以获取到匹配的父项，包括子项（group），但只能获取到第一个满足的匹配字符。能看出上面无法匹配到"),n("code",[s._v("<text>正则</text>")]),s._v("。")]),s._v(" "),n("p",[s._v("如果获取到全局所有匹配项，包括子项呢？")]),s._v(" "),n("p",[s._v("ES2020提供了一种简易的方式：String.prototype.matchAll, 该方法会返回一个迭代器。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'<text>JS</text><text>正则</text>\';\nvar allMatchs = str.matchAll(/<\\w+>(.*?)<\\/\\w+>/g);\n\nfor (const match of allMatchs) {\n  console.log(match);\n}\n\n\n\n/*\n第一次迭代返回：\n[\n    "<text>JS</text>", \n    "JS", \n    index: 0, \n    input: "<text>JS</text><text>正则</text>", \n    groups: undefined\n]\n\n第二次迭代返回：\n[\n    "<text>正则</text>", \n    "正则", \n    index: 15, \n    input: "<text>JS</text><text>正则</text>", \n    groups: undefined\n]\n*/\n\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("p",[s._v("能看出每次迭代中可获取所有的匹配，以及本次匹配的成功的一些其他元信息。")]),s._v(" "),n("h3",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://github.com/tc39/proposals/blob/master/finished-proposals.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("github.com/tc39/propos…"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://prop-tc39.now.sh/",target:"_blank",rel:"noopener noreferrer"}},[s._v("prop-tc39.now.sh/"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=t.exports}}]);